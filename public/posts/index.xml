<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Moch. Lutfi Tech blog</title>
    <link>https://lumochift.org/posts/</link>
    <description>Recent content in Posts on Moch. Lutfi Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 Sep 2018 08:00:00 +0700</lastBuildDate>
    
	<atom:link href="https://lumochift.org/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Membuat Benchmark di Golang</title>
      <link>https://lumochift.org/posts/golang-benchmark/</link>
      <pubDate>Sun, 02 Sep 2018 08:00:00 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/golang-benchmark/</guid>
      <description>Ketika membuat suatu aplikasi tidak dipungkiri salah satu faktor yang sangat penting yaitu kecepatan. Baik kecepatan load data, kecepatan dalam menjalankan suatu perintah ataupun ketika membuka dan menutup aplikasi. Tentunya perlu instrument untuk mengetahui seberapa cepat kode kita, dalam hal ini perasaan tidak dapat digunakan sebagai tolak ukur. Menariknya pada bahasa pemrograman golang sudah ada library standar untuk mengukur seberapa cepat perintah dalam kode yang sering disebut benchmarking.
Kali ini contoh kasus untuk komparasi performa saya menggunakan 2 sorting sederhana yaitu bubble sort dan shell sort.</description>
    </item>
    
    <item>
      <title>Tips dan trik unit test di Go</title>
      <link>https://lumochift.org/posts/tips-trik-unit-test-golang/</link>
      <pubDate>Thu, 01 Feb 2018 21:54:00 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/tips-trik-unit-test-golang/</guid>
      <description>Unit Test memang tidak bisa dilepaskan dari proses pengembangan software. Namun seringkali dalam pembuatan Unit Test di Go terjadi banyak repetisi yang tidak perlu dan Unit Test yang tidak dikelola dengan baik. Salah satu contoh kasus yang paling banyak ditemui dalam pembuatan Unit Test yaitu tidak dipisahkannya logic dan data sehingga ketika penambahan data test terdapat penambahan pula logic.
Contoh Kode Sebelum memulai lebih lanjut berikut adalah contoh kode untuk membantu memahami tulisan ini.</description>
    </item>
    
    <item>
      <title>Golang Test Coverage</title>
      <link>https://lumochift.org/posts/golang-test-coverage/</link>
      <pubDate>Wed, 03 Jan 2018 20:10:36 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/golang-test-coverage/</guid>
      <description>Tulisan ini adalah lanjutan dari Golang Unit Test. Kali ini membahas tentang test coverage, yaitu untuk mengetahui apakah unit test sudah memenuhi semua jalur logika dari sistem yang kita uji. Contoh sederhana sebagai berikut:
 Suatu fungsi untuk menentukan nilai maksimal dari dua integer input.
 Input didefinisikan dalam variabel a dan b.
 Jika a lebih besar atau sama dengan b maka return a, sebaliknya jika b lebih besar maka return b.</description>
    </item>
    
    <item>
      <title>Golang Om Telolet Om Server</title>
      <link>https://lumochift.org/posts/golang-om-telolet-om-server/</link>
      <pubDate>Wed, 03 Jan 2018 08:49:20 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/golang-om-telolet-om-server/</guid>
      <description>Tahun 2016 lalu ramai sekali tentang om telolet om, dan disalah satu website e-commerse di Indonesia menambahkan x-om-telolet-om di response header. Mungkin banyak yang tidak mengetahuinya, karena hanya tambahan response header dan tidak terlihat di tampilan website.
Golang Om Telolet Om Server Pertanyaannya bagaimana menambahkan respon http header menggunakan golang? Jawabnya tentu bisa dan sangat mudah sekali bahkan tidak perlu menggunakan eksternal dependensi tambahan.
Pertama perlu kita buat web server sederhana menggunakan net/http package seperti dibawah ini.</description>
    </item>
    
    <item>
      <title>Golang Unit Test</title>
      <link>https://lumochift.org/posts/golang-unit-test/</link>
      <pubDate>Tue, 02 Jan 2018 08:00:00 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/golang-unit-test/</guid>
      <description>Unit test merupakan salah satu cara untuk validasi sebuah unit terkecil dalam suatu aplikasi, misalnya global variable, fungsi, fungsi dalam suatu class (dalam context golang fungsi dalam struct). Adanya unit test ini juga mempermudah pengujian suatu aplikasi/library yang secara terus menerus/diperlukan repetisi pengujian sehingga tidak perlu membuat aplikasi yang lain untuk menggunakan library kemudian dicek satu-persatu secara manual output program sudah sesuai atau belum.
Golang Unit Test GOLANG sudah mempunyai standard library untuk unit testing, jadi tidak perlu menggunakan third-party untuk unit test.</description>
    </item>
    
    <item>
      <title>Struct</title>
      <link>https://lumochift.org/posts/struct/</link>
      <pubDate>Sun, 17 Dec 2017 17:39:49 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/struct/</guid>
      <description>Dalam pemrograman berorientasi object tentunya kita pasti mengenal apa itu class, enkapsulasi, inheritance, polimorfisme, dan lain sebagainya. Apakah semuanya masih bisa kita pakai dalam golang? Tentu tidak, tapi sebelum membahas lebih lanjut tentang konsep OOP sebaiknya kita perlu mengetahui tipe data dasar untuk OOP di golang yaitu struct.
Struct tl;dr  tidak ada class, adanya struct tidak ada inheritance, tapi menggunakan komposisi tidak ada konstruktor, tapi menggunakan return [pointer] function public access modifier menggunakan nama fungsi/peubah huruf besar public access modifier menggunakan nama fungsi/peubah huruf kecil  Struct merupakan tipe data dasar yang digunakan untuk menggantikan fungsi dari class di bahasa pemrograman lain seperti C#, Java, C++, dll.</description>
    </item>
    
    <item>
      <title>Pointer</title>
      <link>https://lumochift.org/posts/pointer/</link>
      <pubDate>Sun, 05 Nov 2017 15:36:49 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/pointer/</guid>
      <description>Pointers gave me some nostalgic moment when learning C++ on first semester. They become source of headache on my day. Pointers are one of main tools to achieve high performance code in non-garbage-collected languages. So what about pointers in Go? Luckily Go&amp;rsquo;s pointer have achieved the best of both worlds by providing high-performance pointers with garbage-collector capabilities and easiness.
Pointers in real world Unconsiously we are already knew main concept of pointers in real world.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://lumochift.org/posts/hello-world/</link>
      <pubDate>Wed, 30 Aug 2017 16:01:23 +0800</pubDate>
      
      <guid>https://lumochift.org/posts/hello-world/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helloWorld&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Computer Science for Humanities</title>
      <link>https://lumochift.org/posts/computer-science-for-humanities/</link>
      <pubDate>Tue, 25 Nov 2014 20:02:21 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/computer-science-for-humanities/</guid>
      <description>Computer science is no more about computers than astronomy is about telescopes, biology about microscopes, or chemistry about beakers and test tubes. Science is not about tools. It is about how we use them, and what we find out when we do. &amp;mdash; Michael Fellows and Ian Parberry
 Imagine if today without computer technology, maybe we still doing everything in manual way and paper everywhere without gadget, internet connection, smart device, and many things.</description>
    </item>
    
    <item>
      <title>Am I Lost?</title>
      <link>https://lumochift.org/posts/am-i-lost/</link>
      <pubDate>Mon, 24 Nov 2014 20:02:21 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/am-i-lost/</guid>
      <description>I&amp;rsquo;m proud to be software engineer, programmer, code saint, or whatever you call it ðŸ˜„. Do you know before I choose Computer Science degree I don&amp;rsquo;t know what the hell Computer Science is. Here the short history about path of my adventure of code. :p
Junior High School Arch In this era I don&amp;rsquo;t know what I&amp;rsquo;m doing and I hate enter Junior High School 1 Malang because I wanted to enter another school.</description>
    </item>
    
    <item>
      <title>Konsep synchronous dan asynchronous</title>
      <link>https://lumochift.org/posts/async-concept/</link>
      <pubDate>Sat, 12 Oct 2013 20:02:21 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/async-concept/</guid>
      <description>Dalam postingan pertama ini saya akan sedikit mengulas tentang konsep asynchronous dalam analogi sederhana sehingga bisa memudahkan pembaca dalam memahaminya.
Sebelum itu perlu kita ketahui ada proses synchronous dan asynchronous, apa bedanya? Mari kita simak analogi sederhana berikut.
Untuk penjelasan selanjutnya saya menggunakan istilah sync untuk proses synchronous dan async untuk proses asynchronous.
Pertama-tama akan saya gambarkan dalam bentuk proses yg berurutan:
State awal  Kondisi awal, sedang main DOTA 2.</description>
    </item>
    
  </channel>
</rss>