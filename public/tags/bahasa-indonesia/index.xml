<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bahasa Indonesia on Moch. Lutfi Tech blog</title>
    <link>https://lumochift.org/tags/bahasa-indonesia/</link>
    <description>Recent content in Bahasa Indonesia on Moch. Lutfi Tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 02 Sep 2018 08:00:00 +0700</lastBuildDate>
    
	<atom:link href="https://lumochift.org/tags/bahasa-indonesia/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Membuat Benchmark di Golang</title>
      <link>https://lumochift.org/posts/golang-benchmark/</link>
      <pubDate>Sun, 02 Sep 2018 08:00:00 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/golang-benchmark/</guid>
      <description>Ketika membuat suatu aplikasi tidak dipungkiri salah satu faktor yang sangat penting yaitu kecepatan. Baik kecepatan load data, kecepatan dalam menjalankan suatu perintah ataupun ketika membuka dan menutup aplikasi. Tentunya perlu instrument untuk mengetahui seberapa cepat kode kita, dalam hal ini perasaan tidak dapat digunakan sebagai tolak ukur. Menariknya pada bahasa pemrograman golang sudah ada library standar untuk mengukur seberapa cepat perintah dalam kode yang sering disebut benchmarking.
Kali ini contoh kasus untuk komparasi performa saya menggunakan 2 sorting sederhana yaitu bubble sort dan shell sort.</description>
    </item>
    
    <item>
      <title>Tips dan trik unit test di Go</title>
      <link>https://lumochift.org/posts/tips-trik-unit-test-golang/</link>
      <pubDate>Thu, 01 Feb 2018 21:54:00 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/tips-trik-unit-test-golang/</guid>
      <description>Unit Test memang tidak bisa dilepaskan dari proses pengembangan software. Namun seringkali dalam pembuatan Unit Test di Go terjadi banyak repetisi yang tidak perlu dan Unit Test yang tidak dikelola dengan baik. Salah satu contoh kasus yang paling banyak ditemui dalam pembuatan Unit Test yaitu tidak dipisahkannya logic dan data sehingga ketika penambahan data test terdapat penambahan pula logic.
Contoh Kode Sebelum memulai lebih lanjut berikut adalah contoh kode untuk membantu memahami tulisan ini.</description>
    </item>
    
    <item>
      <title>Golang Unit Test</title>
      <link>https://lumochift.org/posts/golang-unit-test/</link>
      <pubDate>Tue, 02 Jan 2018 08:00:00 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/golang-unit-test/</guid>
      <description>Unit test merupakan salah satu cara untuk validasi sebuah unit terkecil dalam suatu aplikasi, misalnya global variable, fungsi, fungsi dalam suatu class (dalam context golang fungsi dalam struct). Adanya unit test ini juga mempermudah pengujian suatu aplikasi/library yang secara terus menerus/diperlukan repetisi pengujian sehingga tidak perlu membuat aplikasi yang lain untuk menggunakan library kemudian dicek satu-persatu secara manual output program sudah sesuai atau belum.
Golang Unit Test GOLANG sudah mempunyai standard library untuk unit testing, jadi tidak perlu menggunakan third-party untuk unit test.</description>
    </item>
    
    <item>
      <title>Struct</title>
      <link>https://lumochift.org/posts/struct/</link>
      <pubDate>Sun, 17 Dec 2017 17:39:49 +0700</pubDate>
      
      <guid>https://lumochift.org/posts/struct/</guid>
      <description>Dalam pemrograman berorientasi object tentunya kita pasti mengenal apa itu class, enkapsulasi, inheritance, polimorfisme, dan lain sebagainya. Apakah semuanya masih bisa kita pakai dalam golang? Tentu tidak, tapi sebelum membahas lebih lanjut tentang konsep OOP sebaiknya kita perlu mengetahui tipe data dasar untuk OOP di golang yaitu struct.
Struct tl;dr  tidak ada class, adanya struct tidak ada inheritance, tapi menggunakan komposisi tidak ada konstruktor, tapi menggunakan return [pointer] function public access modifier menggunakan nama fungsi/peubah huruf besar public access modifier menggunakan nama fungsi/peubah huruf kecil  Struct merupakan tipe data dasar yang digunakan untuk menggantikan fungsi dari class di bahasa pemrograman lain seperti C#, Java, C++, dll.</description>
    </item>
    
  </channel>
</rss>